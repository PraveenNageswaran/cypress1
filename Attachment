Absolutely, you can modify the script to read the Confluence base URL from JSON data. Here's an updated version of the script that includes reading the Confluence base URL from JSON:

```groovy
import org.apache.jmeter.protocol.http.control.Header
import org.apache.jmeter.protocol.http.control.HeaderManager
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy
import org.apache.jmeter.protocol.http.util.Base64Encoder

// Example JSON data including Confluence base URL (Replace this with your actual JSON file parsing logic)
def jsonData = '''{
    "confluenceBaseUrl": "https://your-confluence-url",
    "testResults": [
        {"testname": "Test 1", "status": "Pass", "message": "Test 1 passed successfully"},
        {"testname": "Test 2", "status": "Fail", "message": "Test 2 failed due to assertion error"},
        {"testname": "Test 3", "status": "Pass", "message": "Test 3 passed with warnings"}
    ]
}'''

def parsedData = new groovy.json.JsonSlurper().parseText(jsonData)

def confluenceBaseUrl = parsedData.confluenceBaseUrl

def testResults = parsedData.testResults

def tableBody = new StringBuilder()
tableBody.append("{panel:title=Test Results}\n")
tableBody.append("|Test Name|Status|Description|\n")

testResults.each { entry ->
    tableBody.append("|${entry.testname}|${entry.status}|${entry.message}|\n")
}

tableBody.append("{panel}")

// Specify the file path
def filePath = 'C:/workspace/file.txt'

// Example attachment JSON structure
def attachmentData = [
    "comment": "Attachment for the page",
    "file": filePath
]

def attachmentsJson = new groovy.json.JsonBuilder(attachmentData).toPrettyString()

def pageData = [
    "type": "page",
    "title": "Test Results",
    "body": [
        "storage": [
            "value": tableBody.toString(),
            "representation": "storage",
            "attachments": attachmentsJson // Include attachment information
        ]
    ]
]

def jsonBody = new groovy.json.JsonBuilder(pageData).toPrettyString()

def sampler = new HTTPSamplerProxy()
sampler.setDomain(confluenceBaseUrl)
sampler.setPath('/rest/api/content/')
sampler.setMethod('POST')
sampler.addNonEncodedArgument('', jsonBody, '')
sampler.setPostBodyRaw(true)
sampler.setFollowRedirects(true)
sampler.setUseKeepAlive(true)

def headerManager = new HeaderManager()
headerManager.add(new Header('Content-Type', 'application/json')) // Setting Content-Type
sampler.setHeaderManager(headerManager)

def username = 'pinky@dinky.com'
def password = 'donkey'
def proxyHost = 'usrgrp.net'
def proxyPort = 8080 // Make sure proxyPort is an integer
def proxyUsername = 'pinky'
def proxyPassword = 'password123$'

def credentials = "${username}:${password}"
def encodedCredentials = new String(Base64Encoder.encode(credentials.getBytes()))

sampler.addArgument("Authorization", "Basic ${encodedCredentials}")

sampler.setProperty("HTTPSampler.proxyHost", proxyHost)
sampler.setProperty("HTTPSampler.proxyPort", proxyPort as String) // Set proxyPort as a string

sampler.setProxyUsername(proxyUsername)
sampler.setProxyPassword(proxyPassword)

sampler.sample(null)
```

This script reads the Confluence base URL from the JSON data provided. Adjust the JSON parsing logic as needed to match your actual JSON structure and include the correct Confluence base URL.

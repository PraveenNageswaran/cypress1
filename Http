The error you're encountering with "illegal hex characters in escape (%) pattern for input string" typically arises when there's an issue with encoding or special characters in the script. It seems the script might not be handling special characters within the file content correctly.

Let's refine the script by encoding the file content properly before constructing the multipart request to avoid any character encoding issues:

```groovy
import org.apache.jmeter.protocol.http.control.HeaderManager
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy
import org.apache.jmeter.samplers.SampleResult

def confluenceUrl = "YOUR_CONFLUENCE_API_URL" // Replace with your Confluence API URL
def username = "pinky@dinky.com"
def password = "donkey"
def pageId = "YOUR_CONFLUENCE_PAGE_ID" // Replace with your Confluence page ID
def directoryPath = "/path/to/directory" // Replace with the directory path

def files = new File(directoryPath).listFiles({ file -> file.isFile() && file.getName().startsWith("messages") })

def httpClient = new HTTPClient()

files.each { file ->
    def sampler = new HTTPSamplerProxy()
    sampler.setDomain(confluenceUrl)
    sampler.setMethod("POST")
    sampler.setPath("/rest/api/content/$pageId/child/attachment")
    sampler.setFollowRedirects(true)

    def headerManager = new HeaderManager()
    headerManager.add(new org.apache.jmeter.protocol.http.control.Header("Authorization", "Basic " + "${username}:${password}".bytes.encodeBase64()))
    headerManager.add(new org.apache.jmeter.protocol.http.control.Header("X-Atlassian-Token", "no-check")) // Set Atlassian token
    headerManager.add(new org.apache.jmeter.protocol.http.control.Header("Content-Type", "multipart/form-data; boundary=--JMeterBoundary")) // Set Content-Type
    sampler.setHeaderManager(headerManager)

    def fileBytes = new File(file.getAbsolutePath()).readBytes()

    def encodedFileContent = new String(fileBytes).encodeAsBase64().toString() // Encode file content to Base64

    def requestBody = """
    --JMeterBoundary
    Content-Disposition: form-data; name="file"; filename="${file.getName()}"
    Content-Type: application/octet-stream
    
    ${encodedFileContent}
    --JMeterBoundary--
    """

    sampler.setUseKeepAlive(true)
    sampler.setPostBodyRaw(true)
    sampler.setArguments(new org.apache.jmeter.config.Arguments()) // Clear existing arguments
    sampler.addNonEncodedArgument("", requestBody, "") // Attach the multipart body directly

    def sampleResult = sampler.sample(null).getSampleResult()
    log.info("File ${file.getName()} uploaded with response code: ${sampleResult.getResponseCode()}")
}

httpClient.close()
```

This updated script encodes the file content to Base64 before embedding it in the multipart request body to avoid potential character encoding issues. Adjust the placeholders like `YOUR_CONFLUENCE_API_URL`, `YOUR_CONFLUENCE_PAGE_ID`, `username`, `password`, and `/path/to/directory` with your specific values.

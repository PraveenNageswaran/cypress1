Apologies for the confusion. Let's adjust the script to handle YAML parsing without using `hasNext()`. Instead, we'll iterate over the YAML objects using a for loop. Here's the updated script:

```groovy
import org.yaml.snakeyaml.Yaml
import org.apache.commons.io.FileUtils

// Load YAML file
def yamlData = FileUtils.readFileToString(new File("path/to/your/file.yaml"))

// Parse YAML
def yaml = new Yaml()
def yamlObjects = yaml.loadAll(yamlData)

// Initialize headers and CSV content
def headers = ""
def csvContent = ""

// Extract headers from the first YAML object
def firstObject = yamlObjects.find()

if (firstObject) {
    headers = firstObject.keySet().join(",")
    csvContent += headers + "\n"
} else {
    log.error("YAML file is empty or contains no valid YAML objects.")
}

// Generate CSV rows
for (def obj : yamlObjects) {
    def values = obj.values().join(",")
    csvContent += values + "\n"
}

// Write CSV content to file
if (!csvContent.empty) {
    def csvFile = new File("path/to/your/output.csv")
    FileUtils.writeStringToFile(csvFile, csvContent, "UTF-8")
    log.info("CSV file saved at: " + csvFile.absolutePath)
} else {
    log.error("No valid YAML objects found to convert to CSV.")
}
```

This script iterates over each YAML object using a for loop instead of `hasNext()`. It extracts headers from the first YAML object and then generates CSV rows for each subsequent YAML object. Let me know if this resolves the issue!

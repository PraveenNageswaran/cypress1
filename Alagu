groovy
import org.json.JSONArray
import org.json.JSONObject
import groovy.util.XmlSlurper
import groovy.json.JsonSlurper
import java.nio.file.*

// Get the records array from vars
def records = vars.get("records")

// Create a JSONArray to store the converted records
def jsonArray = new JSONArray()

// Function to check if a string is JSON
def isJSONString(String str) {
    try {
        new JsonSlurper().parseText(str)
        return true
    } catch (Exception e) {
        return false
    }
}

// Function to check if a string is XML
def isXMLString(String str) {
    try {
        new XmlSlurper().parseText(str)
        return true
    } catch (Exception e) {
        return false
    }
}

// Iterate through each record in the array
records.each { record ->
    def jsonRecord = new JSONObject()
    record.each { key, value ->
        if (value instanceof Map) {
            def nestedObject = new JSONObject()
            value.each { nestedKey, nestedValue ->
                if (nestedValue instanceof String) {
                    if (isJSONString(nestedValue)) {
                        nestedObject.put(nestedKey, new JsonSlurper().parseText(nestedValue))
                    } else if (isXMLString(nestedValue)) {
                        nestedObject.put(nestedKey, new XmlSlurper().parseText(nestedValue))
                    } else {
                        nestedObject.put(nestedKey, nestedValue)
                    }
                } else {
                    nestedObject.put(nestedKey, nestedValue)
                }
            }
            jsonRecord.put(key, nestedObject)
        } else {
            jsonRecord.put(key, value)
        }
    }
    jsonArray.put(jsonRecord)
}

// Define the file path to store the JSON data
def filePath = "path/to/your/file.json"

// Write the JSON array to a file
Files.write(Paths.get(filePath), jsonArray.toString(2).getBytes())

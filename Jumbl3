It seems there might be a misunderstanding with the usage of `AuthManager` and `MultipartUrlConfig` in JMeter. To authenticate using the HTTP Authorization Manager in JMeter, you can use HTTP Basic Authentication.

Here's a revised script that utilizes HTTP Basic Authentication:

```groovy
import org.apache.jmeter.protocol.http.control.Header
import org.apache.jmeter.protocol.http.control.HeaderManager
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy
import org.apache.jmeter.protocol.http.util.Base64Encoder

def baseUrl = 'https://your-confluence-url' // Replace with your Confluence URL
def username = 'pinky@dinky.com'
def password = 'donkey'
def proxyHost = 'usrgrp.net'
def proxyPort = '8080'
def proxyUsername = 'pinky'
def proxyPassword = 'password123$'

def pageData = [
    "type": "page",
    "title": "Your Page Title",
    "body": [
        "storage": [
            "value": "<p>This is a new page</p>",
            "representation": "storage"
        ]
    ]
]

def jsonBody = new groovy.json.JsonBuilder(pageData).toPrettyString()

def sampler = new HTTPSamplerProxy()
sampler.setDomain(baseUrl)
sampler.setPath('/rest/api/content/')
sampler.setMethod('POST')
sampler.addNonEncodedArgument('', jsonBody, '')
sampler.setPostBodyRaw(true)
sampler.setFollowRedirects(true)
sampler.setUseKeepAlive(true)

def headerManager = new HeaderManager()
headerManager.add(new Header('Content-Type', 'application/json')) // Setting Content-Type
sampler.setHeaderManager(headerManager)

def credentials = "${username}:${password}"
def encodedCredentials = new String(Base64Encoder.encode(credentials.getBytes()))

sampler.addArgument("Authorization", "Basic ${encodedCredentials}")

sampler.setProxyHost(proxyHost)
sampler.setProxyPort(Integer.parseInt(proxyPort))
sampler.setProxyUsername(proxyUsername)
sampler.setProxyPassword(proxyPassword)

sampler.sample(null)
```

Replace `'https://your-confluence-url'` with your Confluence instance URL and customize the page title and content in the `pageData` variable as needed. This script uses HTTP Basic Authentication by encoding the username and password and adding it to the request's `Authorization` header. Adjust the proxy settings and credentials accordingly.

If some of the values in your JSON object are themselves maps, you can still access and manipulate them accordingly. Here's an example that incorporates maps within the JSON object and retrieves their values:

```groovy
import groovy.json.JsonSlurper

// Your JSON object with maps as values
def jsonObject = '''
{
    "key1": "value1",
    "key2": {"subkey1": "subvalue1", "subkey2": "subvalue2"},
    "key3": "value3"
}
'''

// String containing keys separated by commas
def keysString = "key1,key2"

// Parsing the JSON object
def json = new JsonSlurper().parseText(jsonObject)

// Splitting keys by commas
def keys = keysString.split(',')

// Gathering corresponding values and joining them
def joinedValues = keys.collect { key ->
    def value = json[key]
    if (value instanceof Map) {
        value.collect { subKey, subValue -> subValue }.join(', ')
    } else {
        value
    }
}.join(', ')

// Printing the joined values
println(joinedValues)
```

This code handles a scenario where some values in the JSON object are maps. When accessing a map value, it collects the inner values and joins them together, maintaining the separation for non-map values, and then joins all values as before. Adjust as needed based on your actual JSON structure and the specific handling you require.

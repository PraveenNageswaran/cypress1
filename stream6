import com.fasterxml.jackson.core.*
import com.fasterxml.jackson.databind.*
import java.nio.file.*
import groovy.json.JsonOutput

def k5File = Paths.get("C:/workspace/k5.json").toFile()
def jsonFactory = new JsonFactory()
def objectMapper = new ObjectMapper()
def parser = jsonFactory.createParser(k5File)

def k5UniqueIds = []  // List to store unique IDs
def k5Map = [:]  // Store entire K5 records

while (parser.nextToken() != JsonToken.START_ARRAY) {}
while (parser.nextToken() != JsonToken.END_ARRAY) {
    if (parser.currentToken() == JsonToken.START_OBJECT) {
        def node = objectMapper.readTree(parser)
        def uniqueId = node.get("unique_id").asText()
        k5UniqueIds.add(uniqueId)
        k5Map[uniqueId] = node.toString()
    }
}
parser.close()

// ✅ Store unique IDs and entire K5 records globally in props
props.put("k5_ids", JsonOutput.toJson(k5UniqueIds))
props.put("k5_data", JsonOutput.toJson(k5Map))
log.info("✅ Stored " + k5UniqueIds.size() + " unique IDs and K5 records in props.")



===================

import groovy.json.JsonSlurper

// ✅ Retrieve K5 Unique IDs stored in props
def k5UniqueIdsJson = props.get("k5_ids")
if (k5UniqueIdsJson == null || k5UniqueIdsJson.isEmpty()) {
    log.error("⚠ ERROR: K5 Unique IDs not found in props!")
    return
}
def k5UniqueIds = new JsonSlurper().parseText(k5UniqueIdsJson)

// ✅ Store each unique_id in JMeter variables for ForEach Controller
for (int i = 0; i < k5UniqueIds.size(); i++) {
    vars.put("k5_id_" + (i + 1), k5UniqueIds[i])
}
vars.put("k5_id_count", k5UniqueIds.size().toString())

log.info("✅ Loaded " + k5UniqueIds.size() + " unique IDs from props into JMeter variables.")


==============

import groovy.json.JsonSlurper

def uniqueId = vars.get("current_unique_id")
if (uniqueId == null || uniqueId.isEmpty()) {
    log.error("⚠ ERROR: current_unique_id is missing!")
    return
}

def k5Json = props.get("k5_data")
def k4Json = props.get("k4_data")

if (k5Json == null || k4Json == null) {
    log.error("⚠ ERROR: K5 or K4 data is missing in props!")
    return
}

def k5Map = new JsonSlurper().parseText(k5Json)
def k4Map = new JsonSlurper().parseText(k4Json)

if (k5Map.containsKey(uniqueId) && k4Map.containsKey(uniqueId)) {
    vars.put("k5_json", k5Map.get(uniqueId))
    vars.put("k4_json", k4Map.get(uniqueId))
} else {
    log.warn("⚠ No matching record found for unique_id: " + uniqueId)
}

==============

import groovy.json.JsonSlurper

def uniqueId = vars.get("current_unique_id")
def k5_record = vars.get("k5_json")  
def k4_record = vars.get("k4_json")  

if (k5_record == null || k4_record == null) {
    Failure = true
    FailureMessage = "Missing record in K5 or K4 for ID: ${uniqueId}"
    return
}

def jsonSlurper = new JsonSlurper()
def k5_obj = jsonSlurper.parseText(k5_record)
def k4_obj = jsonSlurper.parseText(k4_record)

if (!k5_obj.equals(k4_obj)) {
    Failure = true
    FailureMessage = "Mismatch for ID: ${uniqueId}\nK5: ${k5_record}\nK4: ${k4_record}"
}



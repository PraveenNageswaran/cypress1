Apologies for the confusion earlier. Let's modify the code to ensure each function is executed correctly for the respective attributes without redundancy:

```groovy
def concat = "concat,attribute1[function:trim function:Replace:,_ append:_] attribute2[function:Replace:123,: append:-] attribute3[function:trim function:Replace::,.]"

def concatValues = ["12245678", "aabbccdd", "34:23:5555"]

def attributes = concat.findAll(/(?<=attribute\d+\[).*?(?=\sattribute|\s*\]|$)/)

def concatResult = ""
attributes.eachWithIndex { attribute, index ->
    def functions = attribute.findAll(/(?<=function:)(\w+)/).collect { it }
    def attributeIndex = index
    def value = concatValues[attributeIndex]

    functions.each { func ->
        if (func == "trim") {
            value = value.trim()
        } else if (func == "Replace") {
            def replaceValues = attribute.findAll(/(?<=Replace:)([^,]+)/).collect { it }
            if (replaceValues.size() >= 2) {
                def from = replaceValues[0]
                def to = replaceValues[1]
                value = value.replace(from, to)
            }
        } else if (func == "append") {
            def appendSymbol = attribute.findAll(/(?<=append:)(\S+)/).collect { it }
            if (appendSymbol.size() == 1) {
                value += appendSymbol[0]
            }
        }
    }
    concatValues[attributeIndex] = value
    if (concat.contains("concat")) {
        concatResult += value
    }
}

if (concat.contains("concat")) {
    println "Concatenated result: $concatResult"
} else {
    println "Modified concatValues: $concatValues"
}
```

This adjusted code should now execute each function (`trim`, `Replace`, and `append`) only once for the respective attributes specified in the `concat` string, without redundantly applying the `trim` function multiple times.

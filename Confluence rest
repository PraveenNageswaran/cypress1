import org.apache.http.HttpHost
import org.apache.http.HttpResponse
import org.apache.http.auth.AuthScope
import org.apache.http.auth.UsernamePasswordCredentials
import org.apache.http.client.CredentialsProvider
import org.apache.http.client.methods.HttpPost
import org.apache.http.conn.routing.HttpRoutePlanner
import org.apache.http.impl.client.BasicCredentialsProvider
import org.apache.http.impl.client.HttpClients
import org.apache.http.impl.conn.DefaultProxyRoutePlanner
import org.apache.http.entity.ContentType
import org.apache.http.entity.StringEntity
import groovy.json.JsonBuilder

def confluenceUrl = "https://your-instance.atlassian.net/wiki/rest/api/content/"
def spaceKey = vars.get("YOUR_SPACE_KEY")
def pageTitle = "Your Page Title"
def token = vars.get("YOUR_CONFLUENCE_API_TOKEN")

def proverb = "Your Proverb Value"

def proxyHost = "your-proxy-host"
def proxyPort = 8080 // Replace with your proxy port number

def proxyUsername = "pinky"
def proxyPassword = "system123$"

def proxy = new HttpHost(proxyHost, proxyPort)
def routePlanner = new DefaultProxyRoutePlanner(proxy)
def httpClient = HttpClients.custom()
    .setRoutePlanner(routePlanner)
    .setDefaultCredentialsProvider(createCredentialsProvider(proxyHost, proxyPort, proxyUsername, proxyPassword))
    .build()

def requestBody = new JsonBuilder()
    .type("page")
    .title(pageTitle)
    .space([
        key: spaceKey
    ])
    .body([
        storage: [
            value: "<h1 style='text-align: center;'>${proverb}</h1>",
            representation: "storage"
        ]
    ])
    .toString()

def httpPost = new HttpPost(confluenceUrl)
httpPost.addHeader("Content-Type", "application/json")
httpPost.addHeader("Authorization", "Bearer ${token}")

httpPost.entity = new StringEntity(requestBody, ContentType.APPLICATION_JSON)

HttpResponse response = httpClient.execute(httpPost)

log.info("Response Code: " + response.getStatusLine().getStatusCode())
log.info("Response: " + response.getEntity().getContent().text)

def createCredentialsProvider(proxyHost, proxyPort, username, password) {
    def credentialsProvider = new BasicCredentialsProvider()
    def creds = new UsernamePasswordCredentials(username, password)
    def proxyAuthScope = new AuthScope(proxyHost, proxyPort)
    credentialsProvider.setCredentials(proxyAuthScope, creds)
    return credentialsProvider
}

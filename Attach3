Absolutely, you can call another REST API to handle attachments in Confluence. To add attachments to a Confluence page, you'll need to use the Confluence REST API endpoint for adding attachments to a specific page.

Here's how you can modify the existing script to include the logic for adding attachments to a Confluence page:

```groovy
import org.apache.jmeter.protocol.http.control.Header
import org.apache.jmeter.protocol.http.control.HeaderManager
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy
import org.apache.jmeter.protocol.http.util.Base64Encoder

// Example JSON data (Replace this with your actual JSON file parsing logic)
def jsonData = '''[
    {"testname": "Test 1", "status": "Pass", "message": "Test 1 passed successfully"},
    {"testname": "Test 2", "status": "Fail", "message": "Test 2 failed due to assertion error"},
    {"testname": "Test 3", "status": "Pass", "message": "Test 3 passed with warnings"}
]'''

def jsonObjects = new groovy.json.JsonSlurper().parseText(jsonData)

def baseUrl = 'https://your-confluence-url' // Replace with your Confluence URL
def username = 'pinky@dinky.com'
def password = 'donkey'
def proxyHost = 'usrgrp.net'
def proxyPort = 8080 // Make sure proxyPort is an integer
def proxyUsername = 'pinky'
def proxyPassword = 'password123$'

def tableBody = new StringBuilder()
tableBody.append("{panel:title=Test Results}\n")
tableBody.append("||Test Name||Status||Description||\n")

jsonObjects.each { entry ->
    tableBody.append("|${entry.testname}|${entry.status}|${entry.message}|\n")
}

tableBody.append("{panel}")

def pageData = [
    "type": "page",
    "title": "Test Results",
    "body": [
        "storage": [
            "value": tableBody.toString(),
            "representation": "storage"
        ]
    ]
]

def jsonBody = new groovy.json.JsonBuilder(pageData).toPrettyString()

def createPageSampler = new HTTPSamplerProxy()
createPageSampler.setDomain(baseUrl)
createPageSampler.setPath('/rest/api/content/')
createPageSampler.setMethod('POST')
createPageSampler.addNonEncodedArgument('', jsonBody, '')
createPageSampler.setPostBodyRaw(true)
createPageSampler.setFollowRedirects(true)
createPageSampler.setUseKeepAlive(true)

def createPageHeaderManager = new HeaderManager()
createPageHeaderManager.add(new Header('Content-Type', 'application/json')) // Setting Content-Type
createPageSampler.setHeaderManager(createPageHeaderManager)

def credentials = "${username}:${password}"
def encodedCredentials = new String(Base64Encoder.encode(credentials.getBytes()))

createPageSampler.addArgument("Authorization", "Basic ${encodedCredentials}")

createPageSampler.setProperty("HTTPSampler.proxyHost", proxyHost)
createPageSampler.setProperty("HTTPSampler.proxyPort", proxyPort as String) // Set proxyPort as a string

createPageSampler.setProxyUsername(proxyUsername)
createPageSampler.setProxyPassword(proxyPassword)

createPageSampler.setName("Create Page Sampler")

createPageSampler.sample(null)

// Assuming you have the file paths for attachments
def attachmentFilePaths = ['/path/to/attachment1.txt', '/path/to/attachment2.pdf']

attachmentFilePaths.each { attachmentPath ->
    def attachmentSampler = new HTTPSamplerProxy()
    attachmentSampler.setDomain(baseUrl)
    attachmentSampler.setPath("/rest/api/content/${pageId}/child/attachment")
    attachmentSampler.setMethod('POST')
    attachmentSampler.setUseKeepAlive(true)

    attachmentSampler.addHeader("X-Atlassian-Token", "nocheck")
    attachmentSampler.setFileField("file", attachmentPath)
    attachmentSampler.setFileField("comment", "Attachment comment") // Optional: Add a comment

    attachmentSampler.setHeaderManager(createPageHeaderManager) // Reuse the same header manager

    attachmentSampler.addArgument("Authorization", "Basic ${encodedCredentials}")

    attachmentSampler.setProperty("HTTPSampler.proxyHost", proxyHost)
    attachmentSampler.setProperty("HTTPSampler.proxyPort", proxyPort as String)

    attachmentSampler.setProxyUsername(proxyUsername)
    attachmentSampler.setProxyPassword(proxyPassword)

    attachmentSampler.setName("Attachment Upload Sampler - ${attachmentPath}")
    
    attachmentSampler.sample(null)
}
```

This script first creates a Confluence page with the provided table content and then uploads attachments to that page using another REST API call. Adjust the attachment file paths, Confluence URL, credentials, proxy settings, and other parameters as needed.

Sure, to create attachments in Confluence using its REST API, you need to make another API call to upload the file and attach it to the Confluence page. Here's an example of how you can modify the previous script to include the attachment functionality:

```groovy
import org.apache.jmeter.protocol.http.control.Header
import org.apache.jmeter.protocol.http.control.HeaderManager
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy
import org.apache.jmeter.protocol.http.util.Base64Encoder

// Example JSON data (Replace this with your actual JSON file parsing logic)
def jsonData = '''[
    {"testname": "Test 1", "status": "Pass", "message": "Test 1 passed successfully"},
    {"testname": "Test 2", "status": "Fail", "message": "Test 2 failed due to assertion error"},
    {"testname": "Test 3", "status": "Pass", "message": "Test 3 passed with warnings"}
]'''

def jsonObjects = new groovy.json.JsonSlurper().parseText(jsonData)

def baseUrl = 'https://your-confluence-url' // Replace with your Confluence URL
def username = 'pinky@dinky.com'
def password = 'donkey'
def proxyHost = 'usrgrp.net'
def proxyPort = 8080 // Make sure proxyPort is an integer
def proxyUsername = 'pinky'
def proxyPassword = 'password123$'

// Function to upload an attachment
def uploadAttachment(pageId, filename) {
    def attachmentUrl = "${baseUrl}/rest/api/content/${pageId}/child/attachment"

    def attachmentSampler = new HTTPSamplerProxy()
    attachmentSampler.setDomain(baseUrl)
    attachmentSampler.setPath("/rest/api/content/${pageId}/child/attachment")
    attachmentSampler.setMethod('POST')
    attachmentSampler.setFollowRedirects(true)
    attachmentSampler.setUseKeepAlive(true)

    def file = new File(filename)
    def fileStream = new FileInputStream(file)
    def fileSize = file.length()

    attachmentSampler.addNonEncodedArgument("file", fileStream, "")
    attachmentSampler.setHeaderManager(headerManager)
    attachmentSampler.setHeader("X-Atlassian-Token", "no-check")
    attachmentSampler.setDoMultipartPost(true)

    def attachmentResult = attachmentSampler.sample()

    log.info("Attachment Response Code: ${attachmentResult.getResponseCode()}")
    log.info("Attachment Response Data: ${attachmentResult.getResponseDataAsString()}")
}

// Creating the page as before
def tableBody = new StringBuilder()
tableBody.append("{panel:title=Test Results}\n")
tableBody.append("|Test Name|Status|Description|\n")

jsonObjects.each { entry ->
    tableBody.append("|${entry.testname}|${entry.status}|${entry.message}|\n")
}

tableBody.append("{panel}")

def pageData = [
    "type": "page",
    "title": "Test Results",
    "body": [
        "storage": [
            "value": tableBody.toString(),
            "representation": "storage"
        ]
    ]
]

def jsonBody = new groovy.json.JsonBuilder(pageData).toPrettyString()

def sampler = new HTTPSamplerProxy()
sampler.setDomain(baseUrl)
sampler.setPath('/rest/api/content/')
sampler.setMethod('POST')
sampler.addNonEncodedArgument('', jsonBody, '')
sampler.setPostBodyRaw(true)
sampler.setFollowRedirects(true)
sampler.setUseKeepAlive(true)

def headerManager = new HeaderManager()
headerManager.add(new Header('Content-Type', 'application/json')) // Setting Content-Type
sampler.setHeaderManager(headerManager)

def credentials = "${username}:${password}"
def encodedCredentials = new String(Base64Encoder.encode(credentials.getBytes()))

sampler.addArgument("Authorization", "Basic ${encodedCredentials}")

sampler.setProperty("HTTPSampler.proxyHost", proxyHost)
sampler.setProperty("HTTPSampler.proxyPort", proxyPort as String) // Set proxyPort as a string

sampler.setProxyUsername(proxyUsername)
sampler.setProxyPassword(proxyPassword)

def result = sampler.sample(null)

log.info("Response: ${result.getResponseDataAsString()}") // Print the response data

// Assuming pageId is obtained from the response (you'll need to extract it)
def pageId = "123456789" // Replace with the actual page ID
def attachmentFilename = "/path/to/your/attachment/file.txt" // Replace with the path to your attachment file

uploadAttachment(pageId, attachmentFilename) // Upload attachment to the page
```

This script first creates the Confluence page with the test results table and then attempts to upload an attachment to that page. Replace `pageId` with the actual ID of the page where you want to attach the file, and `attachmentFilename` with the path to your file that you want to attach. Adjust other variables like Confluence URL, credentials, and proxy settings according to your environment.

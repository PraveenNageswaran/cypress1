I see, there was an issue with using `getEncodedQueryString()` in the previous script. Let's adjust the file attachment method to resolve this:

```groovy
import org.apache.jmeter.config.Arguments
import org.apache.jmeter.protocol.http.control.HeaderManager
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.protocol.http.util.HTTPFileArg
import java.nio.file.Files
import java.nio.file.Paths

def confluenceUrl = "YOUR_CONFLUENCE_API_URL" // Replace with your Confluence API URL
def username = "pinky@dinky.com"
def password = "donkey"
def proxyHost = "usrgrp.net"
def proxyPort = 8080
def proxyUsername = "pinky"
def proxyPassword = "password123$"
def attachmentFilePath = "path/to/your/json/file.json" // Replace with the actual path to your JSON file
def pageId = "YOUR_CONFLUENCE_PAGE_ID" // Replace with the Confluence page ID
def minorEdit = true // Set to 'true' for a minor edit, 'false' otherwise
def comment = "Attachment comment here" // Replace with your comment

// Read file content as byte array
def fileBytes = Files.readAllBytes(Paths.get(attachmentFilePath))

// Create an HTTPSamplerProxy for the request
def confluenceRequest = new HTTPSamplerProxy()
confluenceRequest.setDomain(confluenceUrl)
confluenceRequest.setMethod("POST")
confluenceRequest.setPath("/rest/api/content/$pageId/child/attachment")
confluenceRequest.setFollowRedirects(true)

// Set authentication details
def credentials = "${username}:${password}"
def encodedCredentials = 'Basic ' + credentials.bytes.encodeBase64().toString()
confluenceRequest.setHeader(new HeaderManager())
confluenceRequest.getHeaderManager().add(new Header("Authorization", encodedCredentials))

// Set proxy details
confluenceRequest.setProperty("HTTPSampler.proxyHost", proxyHost)
confluenceRequest.setProperty("HTTPSampler.proxyPort", proxyPort.toString())
confluenceRequest.setProperty("HTTPSampler.proxyUser", proxyUsername)
confluenceRequest.setProperty("HTTPSampler.proxyPass", proxyPassword)

// Create arguments for the request
def args = new Arguments()
args.addArgument("os_username", username)
args.addArgument("os_password", password)
args.addArgument("atl_token", "no-check")
args.addArgument("minorEdit", minorEdit.toString()) // Add minorEdit parameter
args.addArgument("comment", comment) // Add comment parameter
confluenceRequest.setArguments(args)

// Set file as request body
confluenceRequest.setPostBodyRaw(true)
confluenceRequest.addNonEncodedArgument("", new String(fileBytes), "")

// Set request content type
confluenceRequest.setHeader("Content-Type", "application/json")

// Execute the request and retrieve the result
def sampleResult = confluenceRequest.sample(null).getSampleResult()

log.info("Response code: ${sampleResult.getResponseCode()}")
log.info("Response message: ${sampleResult.getResponseMessage()}")
log.info("Response data: ${sampleResult.getResponseDataAsString()}")
```

This updated script reads the file content as bytes and directly sets it as the request body using `setPostBodyRaw(true)` without the need for `HTTPFileArg`. Adjust the variables as needed for your Confluence API and file attachment details.
